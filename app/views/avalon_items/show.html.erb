<h4>Avalon Item</h4>
<h4 class="avalon_item">
  <%= link_to @avalon_item.title, @atom_feed_read.avalon_item_url, target: "_blank" %>
</h4>
<div class="rmd_metadata">
  <%= render 'rmd_metadata' %>
</div>
<div class="clear">
  <h4>Recordings</h4>
  <table>
    <tbody>
    <tr>
      <th>MDPI Barcode</th>
    </tr>
    <% @avalon_item.recordings.each do |recording| %>
      <tr>
        <td><%= recording.mdpi_barcode %></td>
      </tr>
    <% end %>
    </tbody>
  </table>
</div>

<div class="accordion clear">
  <h3>Avalon Metadata</h3>
  <div>
    <table class="json_table">
      <tbody>
      <tr>
        <th>Title</th>
        <td class="adder"><%= @json["title"] %></td>
      </tr>
      <tr>
        <th>Unit</th>
        <td>
          <%= @avalon_item.pod_unit %>
        </td>
        <th>Creator</th>
        <td>
          <ul>
            <% @json["fields"]["creator"]&.each do |mc| %>
              <li class="adder people"><%= mc %></li>
            <% end %>
          </ul>
        </td>
      </tr>
      <tr>
        <th>Uniform Title</th>
        <td class="adder work"><%= @json["uniform_title"] %></td>
        <th>Date Created</th>
        <td><%= @json["fields"]["date_created"] %></td>
      </tr>
      <tr>
        <th>Translated Title</th>
        <td class="adder work">
          <%= @json["translated_title"] %>
        </td>
        <th>Date Issued</th>
        <td class="adder date issue"><%= @json["fields"]["date_issued"] %></td>
      </tr>
      <tr>
        <th>Avalon Collection</th>
        <td><%= @json["collection"] %></td>
        <th>Copyright Date</th>
        <td class="adder date copyright"><%= @json["fields"]["copyright_date"] %></td>
      </tr>
      <tr>
        <th>Main Contributors</th>
        <td>
          <ul>
            <% @json["main_contributors"]&.each do |mc| %>
              <li class="adder people"><%= mc %></li>
            <% end %>
          </ul>
        </td>
        <th>Publisher</th>
        <td>
          <ul>
            <% @json["fields"]["publisher"]&.each do |mc| %>
              <li><%= mc %></li>
            <% end %>
          </ul>
        </td>
      </tr>
      <tr>
        <th>Publication Date</th>
        <td class="adder date publication">
          <%= @json["publication_date"] %>
        </td>
        <th>Physical Description</th>
        <td>
          <ul>
            <% @json["fields"]["physical_description"]&.each do |mc| %>
              <li><%= mc %></li>
            <% end %>
          </ul>
        </td>
      </tr>
      <tr>
        <th>Bibliographic ID</th>
        <td><%= @json["fields"]["bibliographic_id"] %></td>
        <th>Statement of Responsibility</th>
        <td><%= @json["fields"]["statement_of_responsibility"] %></td>
      </tr>
      <tr>
        <th>Note</th>
        <td><%= @json["fields"]["note"] %></td>
        <th>Contributor</th>
        <td>
          <ul>
            <% @json["fields"]["contributor"]&.each do |mc| %>
              <li><%= mc %></li>
            <% end %>
          </ul>
        </td>
      </tr>
      <tr>
        <th>Language</th>
        <td>
          <ul>
            <% @json["fields"]["language"]&.each do |mc| %>
              <li><%= mc %></li>
            <% end %>
          </ul>
        </td>
        <th>Terms of Use</th>
        <td><%= @json["fields"]["terms_of_use"] %></td>
      </tr>
      <tr>
        <th>Table of Contents</th>
        <td>
          <ul>
            <% @json["fields"]["table_of_contents"]&.each do |mc| %>
              <li class='adder work'><%= mc %></li>
            <% end %>
          </ul>
        </td>
      </tr>
      </tbody>
    </table>
  </div>
  <h3>JSON</h3>
  <div class="json">
    <pre>
      <%= JSON.pretty_generate @json %>
    </pre>
  </div>
</div>

<script type="text/javascript" charset="utf-8">
  $(document).ready(function() {
      $('.accordion').accordion({
          collapsible: true,
          active: 0,
          heightStyle: "content"
      });
      $.contextMenu({
          selector: '.adder',
          items: {
              work: {name: "Add Work", callback: function(key, opt) {
                      addWork($(this)[0].firstChild.nodeValue);
                  }},
              person: {name: "Add Person", callback: function(key, opt) {
                  addPerson($(this)[0].firstChild.nodeValue);
                  }},
              date: {name: "Add Date", callback: function(key, opt) {
                  addDate($(this)[0].firstChild.nodeValue)
                  }}
          }
      });
      hookListeners();
  });

  function loadRmdMetadata() {
      $.ajax({
          url: '<%= ajax_avalon_item_rmd_metadata_path(@avalon_item.id) %>',
          success: function(result) {
              $('.rmd_metadata').html(result);
              hookListeners();
          },
          error: function() {
              swal("Something bad happened server side when trying to update the RMD generated metadata...")
          }
      });
  }

  /*
  This ajax call to loadRmdMetadata results in part of the DOM being replaced with the response. Elements in the
  response need to have event listeners installed after being added to the DOM.
   */
  function hookListeners() {
      $("#access").change(function() {
          var val = $(this).find("option:selected").attr('value');
          ajaxAccess(val);
      });
      hookNeedsReview();
      hookReviewCommentSlide();
      hookMarkReviewed();
  }

  function hookReviewCommentSlide() {
      $('.needs_review').hover(function() {
          $('.toggle').toggle('slide', {
              direction: 'up'
          });
      })
  }

  function hookNeedsReview() {
      $('p.review_not_needed').click(function() {
          swal.fire({
              title: 'Comments for Copyright Librarian',
              input: "textarea",
              showCancelButton: true,
              confirmButtonText: 'Mark Needing Review',
              showLoaderOnConfirm: true,
              preConfirm: (comment) => {
                  var form = new FormData();
                  form.append("id", "<%= @avalon_item.id %>");
                  form.append("comment", comment);
                  fetch("<%= ajax_post_needs_review_path %>", {
                      method: 'post',
                      body: form,
                      headers: {
                          'X-CSRF-Token': "<%= form_authenticity_token %>"
                      }
                  }).then(response => {
                      response.text().then(function(text) {
                          if (response.ok) {
                              swal.fire({
                                  title: 'Updated Review Status',
                                  html: "Successfully flagged the Avalon Item as needing review."
                              }).then((result) => {
                                  loadRmdMetadata();
                              });
                          } else {
                              swal.fire({
                                  type: 'error',
                                  title: 'Failed to Update Avalon Item',
                                  html: text
                              })
                          }
                      })

                  })
              }
          })
      });
  }
  function hookMarkReviewed() {
      $('#mark_reviewed_button').click(function() {
          $.ajax({
              url: "<%= ajax_post_reviewed_path %>",
              method: 'post',
              data: {
                  id: "<%= @avalon_item.id %>"
              },
              success: function(result) {
                  swal.fire({
                      title: "Updated Avalon Item",
                      html: "<p>"+result+"</p>"
                  }).then (function() {
                      loadRmdMetadata();
                  })
              },
              error: function(jqXHR, textStatus, errorThrown) {
                  swal.fire({
                      title: "Error",
                      heightAuto: false,
                      type: 'error',
                      html: "An error occurred while trying to mark the record reviewed:<br/><pre>"+ jqXHR.responseText +"</pre>"
                  })
              }
          })
      });
  }

  function ajaxAccess(decision) {
      $.ajax({
          url: '<%= ajax_avalon_item_access_decision_path %>',
          method: "POST",
          data: {
              id: <%= @avalon_item.id %>,
              access: decision
          },
          success: function(response) {
            swal.fire({
                title: 'Updated Record',
                html: "This Avalon Item was successfully updated"
            }).then(function() {
                loadRmdMetadata();
            })
          },
          error: function(jqXHR, textStatus, errorThrown) {
              swal.fire({
                  title: "Error",
                  heightAuto: false,
                  type: 'error',
                  html: "An error occurred while trying to update the access determination:<br/><pre>"+ jqXHR.responseText +"</pre>"
              })
          }
      })
  }

  var edtf_matcher = /^[\d\\?~]{4,5}$/
  function hookEdtfValidation() {
      $('.edtf').on('input',function() {
          val = $(this).val();
          if (val.length == 0 || edtf_matcher.test(val)) {
              $(this).removeClass("bad_edtf");
          } else {
              $(this).addClass('bad_edtf');
          }
      })
  }

  function addWork(val) {
      var form = null;
      $.ajax({
          url: '<%= ajax_new_work_url %>',
          data: {
              avalon_item_id: <%= @avalon_item.id %>,
              title: val
          },
          success: function(result) {
              swal.fire(
                  {
                      title: "Add Work",
                      html: result,
                      showCancelButton: true,
                      cancel: {
                          text: "Cancel",
                          value: null,
                          visible: true,
                          closeModal: true
                      },
                      confirm: {
                          text: "Create Work",
                          value: true,
                          visible: true,
                          closeModal: false,
                      },
                      onOpen: function() {
                          hookEdtfValidation();
                      }
                  }
              ).then(
                  function(result) {
                      if (result.value) {
                          form = $('#new_work');
                          form.submit();
                      }
                  }
              );
          },
          error: function(jqXHR, textStatus, errorThrown) {
              swal("Something Bad Happened...");
          }
      })
  }
  function addPerson(val) {
      var form = null;
      $.ajax({
          url: '<%= ajax_new_person_url %>',
          data: {
              avalon_item_id: <%= @avalon_item.id %>,
              last_name: val
          },
          success: function(result) {
              swal.fire(
                  {
                      title: "Add Person",
                      html: result,
                      showCancelButton: true,
                      cancel: {
                          text: "Cancel",
                          value: null,
                          visible: true,
                          closeModal: true
                      },
                      confirm: {
                          text: "Create Person",
                          value: true,
                          visible: true,
                          closeModal: false,
                      },
                      onOpen: function(dom) {
                          hookEdtfValidation(dom);
                      }
                  }
              ).then(
                  function(result) {
                      if (result.value) {
                          form = $('#new_person');
                          form.submit();
                      }
                  }
              );
              hookEdtfValidation();
          },
          error: function(jqXHR, textStatus, errorThrown) {
              swal("Something Bad Happened...");
          }
      });

  }

  function addDate(val) {
      var form = null;
      $.ajax({
          url: '#',
          data: {
              avalon_item_id: <%= @avalon_item.id %>,
              name: val
          },
          success: function(result) {
              swal.fire(
                  {
                      title: "Add Date",
                      html: "some form to add a date",
                      showCancelButton: true,
                      cancel: {
                          text: "Cancel",
                          value: null,
                          visible: true,
                          closeModal: true
                      },
                      confirm: {
                          text: "Create Date",
                          value: true,
                          visible: true,
                          closeModal: false,
                      }
                  }
              ).then(
                  function(result) {
                      if (result.value) {
                          form = $('#new_date');
                          form.submit();
                      }
                  }
              );
          },
          error: function(jqXHR, textStatus, errorThrown) {
              swal("Something Bad Happened...");
          }
      })
  }
</script>
