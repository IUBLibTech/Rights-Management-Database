<script type="text/javascript" charset="utf-8">
  let popupVal = null;

  $(document).ready(function() {
    // $('.accordion').accordion({
    //     collapsible: true,
    //     active: 0,
    //     heightStyle: "content"
    // });
    hookListeners();
  });

  function loadRmdMetadata() {
    $.ajax({
        url: '<%= ajax_avalon_item_rmd_metadata_path(@avalon_item.id) %>',
        success: function(result) {
            $('.rmd_metadata').html(result);
            hookListeners();
        },
        error: function() {
            swal("Something bad happened server side when trying to update the RMD generated metadata...")
        }
    });
  }


  /*
  This ajax call to loadRmdMetadata results in part of the DOM being replaced with the response. Elements in the
  response need to have event listeners installed after being added to the DOM.
   */
  function hookListeners() {
    $("#access").change(function() {
        let val = $(this).find("option:selected").attr('value');
        ajaxAccess(val);
    });
    hookNeedsReview();
    hookReviewCommentSlide();
    hookMarkReviewed();
    hookAddPerformance();
    hookDeletePerformance();
    hookAddTrack();
    hookDeleteTrack();
    hookPopupMenu();
    hookAddAvalonItemNote();
    hookAddRecordingNote();
    hookAddPerformanceNote();
  }

  function hookAddPerformanceNote() {
    $('.add_performance_note_button').click(function() {
        let performance_id = $(this).attr('data-performance-id');
        $.ajax({
            url: '<%= new_performance_note_path %>',
            data: {
                performance_id: performance_id,
                avalon_item_id: <%= @avalon_item.id %>
            },
            success: function(result) {
                swal.fire({
                    title: 'Adding Note',
                    html: result,
                    showCancelButton: true,
                    cancel: {
                        text: "Cancel",
                        value: null,
                        visible: true,
                        closeModal: true
                    },
                    confirm: {
                        text: "Create Note",
                        value: true,
                        visible: true,
                        closeModal: false,
                    }
                }).then(
                    function(result) {
                        if (result.value) {
                            form = $('#new_performance_note');
                            form.submit();
                        }
                    }
                );
            },
            error: function() {

            }
        })
    });
  }

  function hookAddAvalonItemNote() {
    $('.add_avalon_item_note_button').click(function() {
       let avalon_item_id = $(this).attr('data-avalon-item-id');
       $.ajax({
           url: '<%= new_avalon_item_note_path %>',
           data: {
               avalon_item_id: avalon_item_id
           },
           success: function(result) {
               swal.fire({
                   title: 'Adding Note',
                   html: result,
                   showCancelButton: true,
                   cancel: {
                       text: "Cancel",
                       value: null,
                       visible: true,
                       closeModal: true
                   },
                   confirm: {
                       text: "Create Note",
                       value: true,
                       visible: true,
                       closeModal: false,
                   }
               }).then(
                   function(result) {
                       if (result.value) {
                           form = $('#new_avalon_item_note');
                           form.submit();
                       }
                   }
               );
           },
           error: function() {

           }
       })
    });
  }

  function hookAddRecordingNote() {
      $('.add_recording_note_button').click(function() {
         let recording_id = $(this).attr('data-recording-id');
         $.ajax({
             url: '<%= new_recording_note_path %>',
             data: {
                 recording_id: recording_id
             },
             success: function(result) {
                 swal.fire({
                     title: 'Adding Note',
                     html: result,
                     showCancelButton: true,
                     cancel: {
                         text: "Cancel",
                         value: null,
                         visible: true,
                         closeModal: true
                     },
                     confirm: {
                         text: "Create Note",
                         value: true,
                         visible: true,
                         closeModal: false,
                     }
                 }).then(
                     function(result) {
                         if (result.value) {
                             form = $('#new_recording_note');
                             form.submit();
                         }
                     }
                 );
             },
             error: function() {

             }
         });
      });
    }

  function hookPopupMenu() {
      $('.adder').contextmenu(function(e) {
          e.preventDefault();
          $('#popup_menu').css({left: e.pageX, top: e.pageY}).show();
          popupVal = this.innerText;
      });
      $('.add_work_button').click(function(){
          $('#popup_menu').hide();
          addWork(popupVal);
      });
      $('.add_person_button').click(function(){
          $('#popup_menu').hide();
          addPerson(popupVal);
      });

      $(document).keyup(function(e) {
          if (e.key === "Escape") {
              $('#popup_menu').hide();
          }
      });
      $(document).click(function(e) {
          if (! $(e.target).hasClass('pup')) {
              $('#popup_menu').hide();
          }
      });
    }

  function hookAddTrack() {
      $('.add_track_button').click(function() {
          let performance_id = $(this).attr('data-performance-id');
          $.ajax({
              url: '<%= ajax_new_track_path %>',
              data: {
                  avalon_item_id: window.location.href.substring(window.location.href.lastIndexOf('/') + 1),
                  performance_id: performance_id
              },
              success: function(result) {
                  swal.fire(
                      {
                          title: "Add Track",
                          html: result,
                          showCancelButton: true,
                          cancel: {
                              text: "Cancel",
                              value: null,
                              visible: true,
                              closeModal: true
                          },
                          confirm: {
                              text: "Create Track",
                              value: true,
                              visible: true,
                              closeModal: false,
                          },
                          onOpen: function (dom) {
                              hookHMSValidator();
                              hookYearValidation();
                          },
                          preConfirm: () => {
                              let start_time = $('#track_recording_start_time').val();
                              let end_time = $('#track_recording_end_time').val()
                              let valid_start_time = start_time.length === 0 || validHMS(start_time);
                              let valid_end_time = end_time.length === 0 || validHMS(end_time);
                              let track_name = $('#track_track_name').val();
                              let valid_year = validYear($('#track_copyright_end_date').val());
                              if (valid_start_time && valid_end_time && track_name.length > 0 && valid_year) {
                                   return true;
                              } else {
                                  var msg = "<ul class='errorList'>";
                                  if (!track_name.length > 0) {
                                      msg += "<li>You must specify a name for this Track</li>"
                                  }
                                  if (!valid_start_time) {
                                      msg += "<li>Track Start must be blank or formatted <i><b>hh:mm:ss</b></i></li>";
                                  }
                                  if (!valid_end_time) {
                                      msg += "<li>Track End must be blank or formatted <i><b>hh:mm:ss</b></i></li>";
                                  }
                                  if (!valid_year) {
                                      msg += "<li><i>Enters Public Domain</i> must be a valid year (<i><b>YYYY</b></i>) </li>";
                                  }
                                  msg += "</ul>";
                                  Swal.showValidationError(msg);
                                  return false;
                              }
                          }
                      }
                  ).then(
                      function(result) {
                          if (result.value) {
                              form = $('#new_track');
                              form.submit();
                          }
                      }
                  );
              }
          })
      });
    }

  function hookDeleteTrack() {

  }

  function hookAddPerformance() {
      $('.add_performance_button').click(function() {
          let recording_id = $(this).attr('data-recording-id');
          $.ajax({
              url: '<%= ajax_new_performance_path %>',
              data: {
                  avalon_item_id: window.location.href.substring(window.location.href.lastIndexOf('/') + 1),
                  recording_id: recording_id
              },
              success: function(result) {
                  swal.fire(
                      {
                          title: "Add Performance",
                          html: result,
                          showCancelButton: true,
                          cancel: {
                              text: "Cancel",
                              value: null,
                              visible: true,
                              closeModal: true
                          },
                          confirm: {
                              text: "Create Performance",
                              value: true,
                              visible: true,
                              closeModal: false,
                          },
                          onOpen: function (dom) {
                              hookEdtfValidation(dom);
                              hookFullDateValidation();
                              hookYearValidation();
                              hookUrlValidator();
                          },
                          preConfirm: () => {
                              let val = $('#performance_performance_date_string').val();
                              let valid_date = validFullDate(val);
                              let valid_location = $('#performance_location').val().length > 0;

                              if (valid_date && valid_location) {
                                  return true;
                              } else {
                                  var msg = "<ul class='errorList'>";
                                  if (!valid_date) {
                                      msg += "<li>You must specify a valid date for this Performance (<b>mm/dd/yyyy</b>)</li>"
                                  }
                                  if (!valid_location) {
                                      msg += "<li>You must specify a location for this Performance</li>";
                                  }
                                  msg += "</ul>";
                                  Swal.showValidationError(msg);
                                  return false;
                              }
                          }
                      }
                  ).then(
                      function(result) {
                          if (result.value) {
                              form = $('#new_performance');
                              form.submit();
                          }
                      }
                  );
              }
          })
      });
    }
  function hookDeletePerformance() {
    $('.performance_delete').click(function() {
        let performance_id = $(this).attr('data-performance-id');
        let title = $(this).attr('data-performance-title');
        if (title.length === 0) {
            title = $(this).attr('data-performance-location');
        }
        swal.fire({
            title: "Delete Performance",
            html: "This will permanently delete <b>"+title+"</b>. Are you sure you wish to continue?",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Delete Performance'
        }).then((result) => {
            if (result.value) {
                let id =
                $.ajax({
                    url: "<%= performances_path("id") %>".replace(".id", "/"+performance_id),
                    method: "delete",
                    success: function(result) {
                        swal.fire({
                            text: "The performance was successfully deleted.",
                            onClose: () => {
                                window.location.reload();
                            }
                        })
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        swal.fire({
                            title: "AJAX Error",
                            html: "<p>An error occurred while trying to delete the Performance.</p><p><b>"+ xhr.responseText+"</b></p>",
                            onClose: () => {
                                window.location.reload();
                            }
                        });
                    }
                })
            }
        })
    })
  }

  function hookReviewCommentSlide() {
    $('.needs_review, .reviewed').hoverIntent(function() {
        let toggle = $('.toggle');
        if ( !toggle.is(":animated") ) {
            if (toggle.is(":visible")) {
                toggle.slideUp(200);
            } else {
                toggle.slideDown(200)
            }
        }
    });
  }

  function hookNeedsReview() {
    $('p.review_not_needed, #additional_comment').click(function() {
        swal.fire({
            title: 'Comments for Copyright Librarian',
            input: "textarea",
            showCancelButton: true,
            confirmButtonText: '<%= if @avalon_item.needs_review
                                      @avalon_item.review_state == AvalonItem::REVIEW_STATE_WAITING_ON_CM ? 'Respond' : 'Add Comment'
                                    else
                                      'Request Review'
                                    end
                                %>',
            showLoaderOnConfirm: true,
            preConfirm: (comment) => {
                let form = new FormData();
                form.append("id", "<%= @avalon_item.id %>");
                form.append("comment", comment);
                fetch("<%= ajax_post_needs_review_path %>", {
                    method: 'post',
                    body: form,
                    headers: {
                        'X-CSRF-Token': "<%= form_authenticity_token %>"
                    }
                }).then(response => {
                    response.text().then(function(text) {
                        if (response.ok) {
                            swal.fire({
                                title: 'Updated Review Status',
                                html: text
                            }).then((result) => {
                                loadRmdMetadata();
                            });
                        } else {
                            swal.fire({
                                type: 'error',
                                title: 'Failed to Update Avalon Item',
                                html: text
                            })
                        }
                    })

                })
            }
        })
    });
  }
  function hookMarkReviewed() {
      $('#mark_reviewed_button').click(function() {
          swal.fire({
              title: 'Copyright Librarian Comments',
              html: "<textarea id='comment' rows='6' cols='50'></textarea><br>Reviewed?&nbsp;<input type='checkbox' id='reviewed'/>",
              showCancelButton: true,
              confirmButtonText: 'Add Comment',
              showLoaderOnConfirm: true,
              preConfirm: (comment) => {
                  let form = new FormData();
                  form.append("id", "<%= @avalon_item.id %>");
                  form.append("comment", $('#comment').val());
                  form.append("reviewed", $('#reviewed')[0].checked);
                  fetch("<%= ajax_post_reviewed_path %>", {
                      method: 'post',
                      body: form,
                      headers: {
                          'X-CSRF-Token': "<%= form_authenticity_token %>"
                      }
                  }).then(response => {
                      response.text().then(function(text) {
                          if (response.ok) {
                              swal.fire({
                                  title: 'Updated Review Status',
                                  html: "Successfully flagged the Avalon Item as Reviewed."
                              }).then((result) => {
                                  loadRmdMetadata();
                              });
                          } else {
                              swal.fire({
                                  type: 'error',
                                  title: 'Failed to Update Avalon Item',
                                  html: text
                              })
                          }
                      })

                  })
              }
          });
          $('#reviewed').change(function() {
              $('.swal2-confirm').text((this.checked ? 'Mark Reviewed' : 'Add Comment'));
          });
      });
    }

  function ajaxAccess(decision) {
      $.ajax({
          url: '<%= ajax_avalon_item_access_decision_path %>',
          method: "POST",
          data: {
              id: <%= @avalon_item.id %>,
              access: decision
          },
          success: function(response) {
              swal.fire({
                  title: 'Updated Record',
                  html: "This Avalon Item was successfully updated"
              }).then(function() {
                  loadRmdMetadata();
              })
          },
          error: function(jqXHR, textStatus, errorThrown) {
              swal.fire({
                  title: "Error",
                  heightAuto: false,
                  type: 'error',
                  html: "An error occurred while trying to update the access determination:<br/><pre>"+ jqXHR.responseText +"</pre>"
              })
          }
      })
  }



  function addPerson(val) {
      let form = null;
      let first_name = '';
      let last_name = val;
      if (val.includes(', ')) {
          split = val.split(', ');
          last_name = split[0];
          first_name = split[1];
      } else if (val.includes(',')) {
          split = val.split(',');
          last_name = split[0];
          first_name = split[1];
      } else if (val.includes(' ')) {
          split = val.split(' ');
          first_name = split[0];
          last_name = split[1];
      }
      $.ajax({
          url: '<%= ajax_new_person_path %>',
          data: {
              avalon_item_id: <%= @avalon_item.id %>,
              first_name: first_name,
              last_name: last_name
          },
          success: function(result) {
              swal.fire(
                  {
                      title: "Add Person",
                      html: result,
                      showCancelButton: true,
                      cancel: {
                          text: "Cancel",
                          value: null,
                          visible: true,
                          closeModal: true
                      },
                      confirm: {
                          text: "Create Person",
                          value: true,
                          visible: true,
                          closeModal: false,
                      },
                      onOpen: function(dom) {
                          hookEdtfValidation(dom);
                          hookFullDateValidation();
                          hookUrlValidator();
                          hookFullOrYearEDTF();
                          setJqUiTooltips();
                      },
                      preConfirm: () => {
                          var name = $('#person_first_name').val().length > 0 || $('#person_last_name').val().length > 0;
                          var dates = validFullOrYearEDTF($('#person_date_of_birth_edtf').val()) && validFullOrYearEDTF($('#person_date_of_death_edtf').val());
                          var url = validURL($('#person_authority_source_url').val());
                          if (name && dates && url) {
                              return true;
                          } else {
                              var msg = "<ul class='errorList'>";
                              if (!name) {
                                  msg += "<li>You must specify at least a first or last name for this Person.</li>"
                              }
                              if (!dates) {
                                  msg += "<li>You must specify valid EDTF dates for Birth/Death</li>";
                              }
                              if (!url) {
                                  msg += "<li>You must specify a valid Authority Source URL.</li>"
                              }
                              msg += "</ul>";
                              Swal.showValidationError(msg);
                              return false;
                          }
                      }
                  },
              ).then(
                  function(result) {
                      if (result.value) {
                          form = $('#new_person');
                          //form.submit();
                      }
                  }
              );
              hookEdtfValidation();
              hookFullDateValidation();
              hookYearValidation();
              hookUrlValidator();
          },
          error: function(jqXHR, textStatus, errorThrown) {
              swal("Something Bad Happened...");
          }
      });

  }

  function addWork(val) {
      let form = null;
      $.ajax({
          url: '<%= ajax_new_work_path %>',
          data: {
              avalon_item_id: 15,
              title: val
          },
          success: function(result) {
              swal.fire(
                  {
                      title: "Add Work",
                      html: result,
                      showCancelButton: true,
                      cancel: {
                          text: "Cancel",
                          value: null,
                          visible: true,
                          closeModal: true
                      },
                      confirm: {
                          text: "Create Work",
                          value: true,
                          visible: true,
                          closeModal: false,
                      },
                      onOpen: function() {
                          hookEdtfValidation();
                          hookFullDateValidation();
                          hookYearValidation();
                          hookUrlValidator();
                          setJqUiTooltips();
                      },
                      preConfirm: () => {
                          let title = $('#work_title').val().length > 0;
                          let dates =  validEdtfYear($('#work_publication_date').val()) && validEdtfYear($('#work_copyright_end_date').val());
                          let url = validURL($('#work_authority_source_url').val());
                          if (title && dates && url) {
                              return true;
                          } else {
                              let msg = "";
                              if (!title) {
                                  msg += 'You Must Specify a Title.';
                              }
                              if (!dates) {
                                  msg += msg.length > 0 ? " You must also Specify valid EDTF dates for Publication/Copyright." : "You must Specify valid EDTF dates for Publication/Copyright."
                              }
                              if (!url) {
                                  msg += msg.length > 0 ? " You must also specify a valid Authority Source URL" : "You must specify a valid Authority Source URL"
                              }
                              Swal.showValidationError(msg);
                              return false;
                          }
                      }

                  }
              ).then(
                  function(result) {
                      if (result.value) {
                          form = $('#new_work');
                          //form.submit();
                      }
                  }
              );
          },
          error: function(jqXHR, textStatus, errorThrown) {
              swal("Something Bad Happened...");
          }
      })
  }
</script>