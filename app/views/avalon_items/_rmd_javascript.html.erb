<script type="text/javascript" charset="utf-8">
  let popupVal = null;

    $(document).ready(function() {
        $('.accordion').accordion({
            collapsible: true,
            active: 0,
            heightStyle: "content"
        });
        hookListeners();
    });

    function loadRmdMetadata() {
        $.ajax({
            url: '<%= ajax_avalon_item_rmd_metadata_path(@avalon_item.id) %>',
            success: function(result) {
                $('.rmd_metadata').html(result);
                hookListeners();
            },
            error: function() {
                swal("Something bad happened server side when trying to update the RMD generated metadata...")
            }
        });
    }

    /*
    This ajax call to loadRmdMetadata results in part of the DOM being replaced with the response. Elements in the
    response need to have event listeners installed after being added to the DOM.
     */
    function hookListeners() {
        $("#access").change(function() {
            let val = $(this).find("option:selected").attr('value');
            ajaxAccess(val);
        });
        hookNeedsReview();
        hookReviewCommentSlide();
        hookMarkReviewed();

        // all popup menu stuff
        $('.adder').contextmenu(function(e) {
            e.preventDefault();
            $('#popup_menu').css({left: e.pageX, top: e.pageY}).show();
            popupVal = this.innerText;
        });
        $('.add_work_button').click(function(){
            $('#popup_menu').hide();
            addWork(popupVal);
        });
        $('.add_person_button').click(function(){
            $('#popup_menu').hide();
            addPerson(popupVal);
        });

        $(document).keyup(function(e) {
            if (e.key === "Escape") {
                $('#popup_menu').hide();
;            }
        });
        $(document).click(function(e) {
            if (! $(e.target).hasClass('pup')) {
                $('#popup_menu').hide();
            }
        });
        // end popup menu stuff
    }

    function hookAddPerformance() {
        $('.add_performance_button').click(function() {

        });
    }

    function hookReviewCommentSlide() {
        $('.needs_review, .reviewed').hoverIntent(function() {
            let toggle = $('.toggle');
            if ( !toggle.is(":animated") ) {
                if (toggle.is(":visible")) {
                    toggle.slideUp(200);
                } else {
                    toggle.slideDown(200)
                }
            }
        });
    }

    function hookNeedsReview() {
        $('p.review_not_needed').click(function() {
            swal.fire({
                title: 'Comments for Copyright Librarian',
                input: "textarea",
                showCancelButton: true,
                confirmButtonText: 'Mark Needing Review',
                showLoaderOnConfirm: true,
                preConfirm: (comment) => {
                    let form = new FormData();
                    form.append("id", "<%= @avalon_item.id %>");
                    form.append("comment", comment);
                    fetch("<%= ajax_post_needs_review_path %>", {
                        method: 'post',
                        body: form,
                        headers: {
                            'X-CSRF-Token': "<%= form_authenticity_token %>"
                        }
                    }).then(response => {
                        response.text().then(function(text) {
                            if (response.ok) {
                                swal.fire({
                                    title: 'Updated Review Status',
                                    html: "Successfully flagged the Avalon Item as needing review."
                                }).then((result) => {
                                    loadRmdMetadata();
                                });
                            } else {
                                swal.fire({
                                    type: 'error',
                                    title: 'Failed to Update Avalon Item',
                                    html: text
                                })
                            }
                        })

                    })
                }
            })
        });
    }
    function hookMarkReviewed() {
        $('#mark_reviewed_button').click(function() {
            swal.fire({
                title: 'Copyright Librarian Comments',
                input: "textarea",
                showCancelButton: true,
                confirmButtonText: 'Mark Reviewed',
                showLoaderOnConfirm: true,
                preConfirm: (comment) => {
                    let form = new FormData();
                    form.append("id", "<%= @avalon_item.id %>");
                    form.append("comment", comment);
                    fetch("<%= ajax_post_reviewed_path %>", {
                        method: 'post',
                        body: form,
                        headers: {
                            'X-CSRF-Token': "<%= form_authenticity_token %>"
                        }
                    }).then(response => {
                        response.text().then(function(text) {
                            if (response.ok) {
                                swal.fire({
                                    title: 'Updated Review Status',
                                    html: "Successfully flagged the Avalon Item as Reviewed."
                                }).then((result) => {
                                    loadRmdMetadata();
                                });
                            } else {
                                swal.fire({
                                    type: 'error',
                                    title: 'Failed to Update Avalon Item',
                                    html: text
                                })
                            }
                        })

                    })
                }
            });
        });
    }

    function ajaxAccess(decision) {
        $.ajax({
            url: '<%= ajax_avalon_item_access_decision_path %>',
            method: "POST",
            data: {
                id: <%= @avalon_item.id %>,
                access: decision
            },
            success: function(response) {
                swal.fire({
                    title: 'Updated Record',
                    html: "This Avalon Item was successfully updated"
                }).then(function() {
                    loadRmdMetadata();
                })
            },
            error: function(jqXHR, textStatus, errorThrown) {
                swal.fire({
                    title: "Error",
                    heightAuto: false,
                    type: 'error',
                    html: "An error occurred while trying to update the access determination:<br/><pre>"+ jqXHR.responseText +"</pre>"
                })
            }
        })
    }

    function hookEdtfValidation() {
        $('.edtf').on('input',function() {
            let val = $(this).val();
            if (val.length === 0 || validEdtf(val)) {
                $(this).removeClass("bad_edtf");
            } else {
                $(this).addClass('bad_edtf');
            }
        })
    }

    function hookUrlValidator() {
        $('.urlValidator').on('input',function() {
            let val = $(this).val();
            if (val.length === 0 || validURL(val)) {
                $(this).removeClass("bad_edtf");
            } else {
                $(this).addClass('bad_edtf');
            }
        });
    }

    function validURL(str) {
        let pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
            '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
            '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
            '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
            '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
            '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
        return str === undefined || !!pattern.test(str) || str.length == 0;
    }

    function validEdtf(str) {
        let edtf_matcher = /^[\d\\?~]{4,5}$/
        return str === undefined || !!edtf_matcher.test(str) || str === 'unknown' || str.length == 0;
    }

  function addPerson(val) {
      let form = null;
      let first_name = '';
      let last_name = val;
      if (val.includes(', ')) {
          split = val.split(', ');
          last_name = split[0];
          first_name = split[1];
      } else if (val.includes(',')) {
          split = val.split(',');
          last_name = split[0];
          first_name = split[1];
      } else if (val.includes(' ')) {
          split = val.split(' ');
          first_name = split[0];
          last_name = split[1];
      }
      $.ajax({
          url: '<%= ajax_new_person_path %>',
          data: {
              avalon_item_id: <%= @avalon_item.id %>,
              first_name: first_name,
              last_name: last_name
          },
          success: function(result) {
              swal.fire(
                  {
                      title: "Add Person",
                      html: result,
                      showCancelButton: true,
                      cancel: {
                          text: "Cancel",
                          value: null,
                          visible: true,
                          closeModal: true
                      },
                      confirm: {
                          text: "Create Person",
                          value: true,
                          visible: true,
                          closeModal: false,
                      },
                      onOpen: function(dom) {
                          hookEdtfValidation(dom);
                          hookUrlValidator();
                      },
                      preConfirm: () => {
                          var name = $('#person_first_name').val().length > 0 || $('#person_last_name').val().length > 0;
                          var dates = validEdtf($('#person_date_of_birth_edtf').val()) && validEdtf($('#person_date_of_death_edtf').val());
                          var url = validURL($('#person_authority_source_url').val());
                          if (name && dates && url) {
                              return true;
                          } else {
                              var msg = "<ul class='errorList'>";
                              if (!name) {
                                  msg += "<li>You must specify at least a first or last name for this Person.</li>"
                              }
                              if (!dates) {
                                  msg += "<li>You must specify valid EDTF dates for Birth/Death</li>";
                              }
                              if (!url) {
                                  msg += "<li>You must specify a valid Authority Source URL.</li>"
                              }
                              msg += "</ul>";
                              Swal.showValidationError(msg);
                              return false;
                          }
                      }
                  },
              ).then(
                  function(result) {
                      if (result.value) {
                          form = $('#new_person');
                          //form.submit();
                      }
                  }
              );
              hookEdtfValidation();
              hookUrlValidator();
          },
          error: function(jqXHR, textStatus, errorThrown) {
              swal("Something Bad Happened...");
          }
      });

  }

    function addWork(val) {
        let form = null;
        $.ajax({
            url: '<%= ajax_new_work_path %>',
            data: {
                avalon_item_id: 15,
                title: val
            },
            success: function(result) {
                swal.fire(
                    {
                        title: "Add Work",
                        html: result,
                        showCancelButton: true,
                        cancel: {
                            text: "Cancel",
                            value: null,
                            visible: true,
                            closeModal: true
                        },
                        confirm: {
                            text: "Create Work",
                            value: true,
                            visible: true,
                            closeModal: false,
                        },
                        onOpen: function() {
                            hookEdtfValidation();
                            hookUrlValidator();
                        },
                        preConfirm: () => {
                            let title = $('#work_title').val().length > 0;
                            let dates =  validEdtf($('#work_publication_date').val()) && validEdtf($('#work_copyright_end_date').val());
                            let url = validURL($('#work_authority_source_url').val());
                            if (title && dates && url) {
                                return true;
                            } else {
                                let msg = "";
                                if (!title) {
                                    msg += 'You Must Specify a Title.';
                                }
                                if (!dates) {
                                    msg += msg.length > 0 ? " You must also Specify valid EDTF dates for Publication/Copyright." : "You must Specify valid EDTF dates for Publication/Copyright."
                                }
                                if (!url) {
                                    msg += msg.length > 0 ? " You must also specify a valid Authority Source URL" : "You must specify a valid Authority Source URL"
                                }
                                Swal.showValidationError(msg);
                                return false;
                            }
                        }

                    }
                ).then(
                    function(result) {
                        if (result.value) {
                            form = $('#new_work');
                            //form.submit();
                        }
                    }
                );
            },
            error: function(jqXHR, textStatus, errorThrown) {
                swal("Something Bad Happened...");
            }
        })
    }
</script>